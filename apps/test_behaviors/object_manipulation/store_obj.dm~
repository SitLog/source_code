%%
diag_mod(store_obj(Cate,Cupboard,Cupbrd_deliver),
[
     %% Initial situation. 
     [	
     id ==> is,
     type ==> neutral,
     arcs ==> [
               empty : [get(scan_st,Sc),
                        get(tilt_st,Ti),
                        get(tbl_list,Table_Ang),
			assign(Cat_Lst,apply(extract_all_cat_st(_),[Cate])),
		        assign(C,apply(head_of_list(_),[Cat_Lst])),
			set(cat,C),
			assign(Rest,apply(list_fil(L_,V_),[Cat_Lst,C])),
			set(rest_cat,Rest),
			robotheight(1.10),
		        set(last_height,1.10)
		       ] => scan_tbl(Sc,Ti,Table_Ang,true,C)
	      ]
     ],
     
     
     %% Base case 1
     [
     id ==>  scan_tbl(_,_,_,_,empty_list),
     type ==> neutral,
     arcs ==> [
	      empty : [get(right_arm, Obj_right)] 
                       => apply(when(I_,T_,F_), [Obj_right == free,error,release])
	      ]
     ],


     %% Base case 2
     [
     id ==>  scan_tbl(_,_,_,_,non_list),
     type ==> neutral,
     arcs ==> [
	      empty : [get(right_arm, Obj_right)] 
                       => apply(when(I_,T_,F_), [Obj_right == free,error,release])
	      ]
     ],

     

     %%
     %% This is the case there are at least one position  where to look for objects.
     [
     id ==>  scan_tbl(Scan,Tilt,Pts,InSitu,C),
     type ==> recursive,
     embedded_dm ==> find(object,C,Pts,Scan,Tilt,category,Objs,RemainigPos,InSitu,false,false,_),
     arcs ==> [
               success : [get(brazo,A),
                          set(more_pos,RemainigPos),
                          set(flag_angle_storing_groceries,false)
                         ] => ask_obj( apply(get_head_cat(O_,C_), [Objs,Cate]), A),
               error   : [assign(SingleCat,get(rest_cat,_)),
			  assign(CC,apply(head_of_list(_),[SingleCat])),
			  set(cat,CC),
			  assign(Rest,apply(list_fil(L_,V_),[SingleCat,CC])),
			  set(rest_cat,Rest),
			  robotheight(1.10),
		          set(last_height,1.10)
			 ] => scan_tbl(Scan,Tilt,Pts,false,CC)
              ]    
     ],
   

     %% If no object was to be taken since there was not object within range
     [
     id ==> ask_obj(empty_list,_),
     type ==> neutral,
     arcs ==> [
               empty : [get(scan_st,Sc),
                        get(tilt_st,Ti),
                        get(more_pos,Pos),
			get(cat,C),
			robotheight(1.10),
		        set(last_height,1.10)
		       ] => scan_tbl(Sc,Ti,Pos,false,C)
	      ]     
     ],
     
     
     %% FndObjs is not a list
     [
     id ==> ask_obj(non_list,_),
     type ==> neutral,
     arcs ==> [
               empty : [get(scan_st,Sc),
                        get(tilt_st,Ti),
                        get(more_pos,Pos),get(cat,C),
                        robotheight(1.10),
		        set(last_height,1.10)] => scan_tbl(Sc,Ti,Pos,false,C)
	      ]     
     ],

   
     %% After an object is found, this situation makes Golem take such an object
     %% with its right hand
     [
     id ==> ask_obj(object(Id,X,Y,Z,O1,O2,O3,O4,V),1),
     type ==> recursive,
     embedded_dm ==> say(['Please hand me the ', Id,'I will take the object with my right hand'],_),
     arcs ==> [
               success : [sleep,
                          switcharm(1),
                          grasp(0.0,0.5,_),
                          set(brazo, 2),
                          get(scan_st,Scan),
                          get(tilt_st,Tilt),
                          get(more_pos,Pos),
			  get(cat,C),
			  switcharm(0),
			  apply(arm_update(_,_),[right,Id]),
			  robotheight(1.10),
		          set(last_height,1.10)] 
                       => scan_tbl(Scan,Tilt,Pos,true,C), 
               error   : [get(scan_st,Scan),
                          get(tilt_st,Tilt),
                          get(more_pos,Pos),
			  get(cat,C),
			  robotheight(1.10),
		          set(last_height,1.10)]
                       => scan_tbl(Scan,Tilt,Pos,true,C)
	      ]     
     ],
     
     %% After an object is found, this situation makes Golem take such an object
     %% with its left hand
     [
     id ==> ask_obj(object(Id,X,Y,Z,O1,O2,O3,O4,V),2),
     type ==> recursive,
     embedded_dm ==> say(['Please hand me the ', Id,'I will take the object with my left hand'],_),
     arcs ==> [
               success : [set(brazo,1),
                          switcharm(2),
                          grasp(0.0,0.5,_),
                          switcharm(0),
			              apply(arm_update(_,_),[left,Id])] => release,
               error   : [set(brazo,1)] => release
    	      ]
     ],
    
     
     %%
     %% This situation performs a release based on the category
     %% of the objects Golem currently holds
     [
     id ==> release,
     type ==> recursive,
     embedded_dm ==> release_category(Cupboard,Cupbrd_deliver,Cate), 
     arcs ==> [
              success : [advance_fine(-0.10, _),
                         get(angle_storing_groceries,Angle),
			 set(brazo, 1)] => mv_table,
              error   : empty => release
              ]
     ],


     %%
     %% Golem turns Angle, and then keeps track of the rotation angle by adding 
     %% it to the global variable
     [	
     id ==> mv_table,
     type ==> recursive,
     embedded_dm ==> move(turn=>(180.0), _),
     arcs ==> [
              success : [get(scan_st,Sc),
                         get(tilt_st,Ti),
                         get(tbl_list,Table_Ang),
                         set(flag_angle_storing_groceries,true),
                         set(angle_operation,addition),
			 get(cat,C),
			 robotheight(1.10),
		         set(last_height,1.10)] => scan_tbl(Sc,Ti,Table_Ang,true,C), 
              error   : empty => mv_table
              ]
     ],

     
     %% Final situation. Success case.
     [
     id ==> success,
     type ==> final
     ],
     

     %% Final situation. Error case.
     [
     id ==> error,
     type ==> final
     ]     
     
],

% Second argument: list of local variables
[
    cat ==> none,
    rest_cat ==> [],
    more_pos ==> [],
    brazo ==> 1,
    scan_st ==> [0.0],             %% <--- Attention!!
    tilt_st ==> [-40.0],                        %% <--- Attention!!
    tbl_list ==> [displace_precise=>(-0.10)]     %% <--- Attention!!
]

).	
	
