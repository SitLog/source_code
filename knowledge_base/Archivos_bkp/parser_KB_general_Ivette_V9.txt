[

class(top,none,[],[],[]),

class(grammar, top, [], [], []),

class(item, grammar, [], [], [	
	[id => i1, [ rule_descriptor=> (item(I-R,X):-human(I-R,X)) ],[]], 
	[id => i2, [ rule_descriptor=> (item(I-R,X):-object(I-R,X)) ],[]],
	[id => i3, [ rule_descriptor=> (item(I-R,X):-location(I-R,X)) ],[]],
	[id => i4, [ rule_descriptor=> (item(I-R,X):-room(I-R,X)) ],[]],
	[id => i5, [ rule_descriptor=> (item(I-R,X):-object_category(I-R,X)) ],[]]
   	]),
   	
class(verb, grammar, [], [], [	

	[id => v1,  [ rule_descriptor=> move([go,to|X]-X,_) ], []], 
  	[id => v2,  [ rule_descriptor=> move([navigate,to|X]-X,_) ], []],
  	[id => v3,  [ rule_descriptor=> move([reach,to|X]-X,_) ], []], 
  	[id => v4,  [ rule_descriptor=> move([get,into|X]-X,_) ], []],
  	[id => v5,  [ rule_descriptor=> move([drive,to|X]-X,_) ], []],
  	[id => v6,  [ rule_descriptor=> move([move,to|X]-X,_) ], []],
  	[id => v7,  [ rule_descriptor=> move([walk|X]-X,_) ], []],

	[id => v8,  [ rule_descriptor=> go([go|X]-X,_) ], []], 
  	[id => v9,  [ rule_descriptor=> go([go,and|X]-X,_) ], []],

  	[id => v10, [ rule_descriptor=> find([look,for|X]-X,_) ], []], 
  	[id => v11, [ rule_descriptor=> find([locate|X]-X,_) ], []], 
  	[id => v12, [ rule_descriptor=> find([find|X]-X,_) ], []],
  	[id => v13, [ rule_descriptor=> find([detect|X]-X,_) ], []],
  	[id => v14, [ rule_descriptor=> find([search, for|X]-X,_) ], []],
  	[id => v15, [ rule_descriptor=> find([obtain|X]-X,_) ], []],
  	[id => v16, [ rule_descriptor=> find([identify|X]-X,_) ], []],

	[id => v17, [ rule_descriptor=> take([grasp|X]-X,_) ], []], 
  	[id => v18, [ rule_descriptor=> take([take|X]-X,_) ], []],
  	[id => v19, [ rule_descriptor=> take([get|X]-X,_) ], []],
  	[id => v20, [ rule_descriptor=> take([fetch|X]-X,_) ], []],  
  	[id => v21, [ rule_descriptor=> take([pick,up|X]-X,_) ], []], 
  	[id => v22, [ rule_descriptor=> take([seize|X]-X,_) ], []], 
  	[id => v23, [ rule_descriptor=> take([collect|X]-X,_) ], []],
  	[id => v24, [ rule_descriptor=> take([grab|X]-X,_) ], []],
  	[id => v25, [ rule_descriptor=> take([obtain|X]-X,_) ], []],

  	[id => v26, [ rule_descriptor=> deliver([bring,it,to|X]-X,_) ], []],
	[id => v27, [ rule_descriptor=> deliver([carry,it,to|X]-X,_) ], []], 
  	[id => v28, [ rule_descriptor=> deliver([deliver,it,to|X]-X,_) ], []],
  	[id => v29, [ rule_descriptor=> deliver([deliver,it,on,the|X]-X,_) ], []],
  	[id => v30, [ rule_descriptor=> deliver([take,it,to|X]-X,_) ], []], 
  	[id => v31, [ rule_descriptor=> deliver([give,it,to|X]-X,_) ], []], 
  	[id => v32, [ rule_descriptor=> deliver([hand,it,to|X]-X,_) ], []], 
  	[id => v33, [ rule_descriptor=> deliver([put,it,on,the|X]-X,_) ], []], 
  	[id => v34, [ rule_descriptor=> deliver([place,it,on,the|X]-X,_) ], []], 
  	[id => v35, [ rule_descriptor=> deliver([put,it,out,the|X]-X,_) ], []], 

  	[id => v36, [ rule_descriptor=> say([speak|X]-X,_) ], []],
	[id => v37, [ rule_descriptor=> say([tell|X]-X,_) ], []], 
	[id => v37a, [ rule_descriptor=> say([tell,me|X]-X,_) ], []], 
  	[id => v38, [ rule_descriptor=> say([say|X]-X,_) ], []],
  	[id => v38a, [ rule_descriptor=> say([say,to,me|X]-X,_) ], []],

  	[id => v39, [ rule_descriptor=> answer([answer,a,question|X]-X,answer) ], []], 
  	[id => v40, [ rule_descriptor=> answer([respond,a,question|X]-X,answer) ], []], 
  	[id => v41, [ rule_descriptor=> answer([solve,a,question|X]-X,answer) ], []], 

  	[id => v42, [ rule_descriptor=> report([and,report,to|X]-X,_) ], []],
  	[id => v43, [ rule_descriptor=> report([and,describe,to|X]-X,_) ], []],
  	[id => v44, [ rule_descriptor=> report([and,inform,to|X]-X,_) ], []],
  	[id => v45, [ rule_descriptor=> report([and,detail,to|X]-X,_) ], []],

	[id => v46, [ rule_descriptor=> follow_1([follow,her,to,the|X]-X,_) ], []], 
	[id => v47, [ rule_descriptor=> follow_1([follow,him,to,the|X]-X,_) ], []], 
  	[id => v48, [ rule_descriptor=> follow_2([follow,her|X]-X,_) ], []],
  	[id => v49, [ rule_descriptor=> follow_2([follow,him|X]-X,_) ], []],
  	[id => v50, [ rule_descriptor=> (follow(X-Y,follow(Item)):-follow_1(X-N1,_),item(N1-Y,Item)) ], []], 
  	[id => v51, [ rule_descriptor=> (follow(X-Y,follow(until_gesture)):-follow_2(X-Y,_)) ], []],

	[id => v52, [ rule_descriptor=> find_person_1([a,person|X]-X,_) ], []], 
  	[id => v53, [ rule_descriptor=> (find_person(X-Y,_):-find(X-N1,_),find_person_1(N1-Y,_)) ], []],

  	[id => v54, [ rule_descriptor=> find_gesture_1([the,calling,person|X]-X,_) ], []], 
  	[id => v55, [ rule_descriptor=> (find_gesture(X-Y,_):-find(X-N1,_),find_gesture_1(N1-Y,_)) ], []]

   	]),
   	
class(ordinal, grammar, [], [], [

	[id => ord1, [rule_descriptor => number([first|X]-X,1) ],[]],
	[id => ord2, [rule_descriptor => number([second|X]-X,2) ],[]],
	[id => ord3, [rule_descriptor => number([third|X]-X,3) ],[]],
	[id => ord4, [rule_descriptor => number([fourth|X]-X,4) ],[]],
	[id => ord5, [rule_descriptor => number([fifth|X]-X,5) ],[]],
	[id => ord5, [rule_descriptor => number([sixth|X]-X,6) ],[]]

	]),
	
class(adjectives, grammar, [], [],[

	[id => adj1,  [ rule_descriptor=> color_1([color|X]-X,color) ],[]],

	[id => adj2,  [ rule_descriptor=> color([blue|X]-X,blue) ],[]],
	[id => adj3,  [ rule_descriptor=> color([green|X]-X,green) ],[]],
	[id => adj4,  [ rule_descriptor=> color([red|X]-X,red) ],[]],
	[id => adj5,  [ rule_descriptor=> color([black|X]-X,black) ],[]],
	[id => adj6,  [ rule_descriptor=> color([white|X]-X,white) ],[]],
	[id => adj7,  [ rule_descriptor=> color([yellow|X]-X,yellow) ],[]],
	[id => adj8,  [ rule_descriptor=> color([gray|X]-X,gray) ],[]],
	[id => adj9,  [ rule_descriptor=> color([orange|X]-X,orange) ],[]],
	[id => adj10, [ rule_descriptor=> color([pink|X]-X,pink) ],[]],
	[id => adj11, [ rule_descriptor=> color([purple|X]-X,purple) ],[]],
	[id => adj12, [ rule_descriptor=> color([violet|X]-X,violet) ],[]],
	[id => adj13, [ rule_descriptor=> color([brown|X]-X,brown) ],[]],
	[id => adj14, [ rule_descriptor=> color([cyan|X]-X,cyan) ],[]],
	[id => adj15, [ rule_descriptor=> color([magenta|X]-X,magenta) ],[]],

	[id => adj16, [ rule_descriptor=> adjective([smallest|X]-X,smallest) ],[]],
	[id => adj17, [ rule_descriptor=> adjective([biggest|X]-X,biggest) ],[]],
	[id => adj18, [ rule_descriptor=> adjective([highest|X]-X,highest) ],[]],
	[id => adj19, [ rule_descriptor=> adjective([tallest|X]-X,tallest) ],[]],

	[id => adj20, [ rule_descriptor=> adjective([oldest|X]-X,oldest) ],[]],
	[id => adj21, [ rule_descriptor=> adjective([youngest|X]-X,youngest) ],[]],

	[id => adj22, [ rule_descriptor=> adjective([heaviest|X]-X,heaviest) ],[]],
	[id => adj23, [ rule_descriptor=> adjective([lightest|X]-X,lightest) ],[]],

	[id => adj24, [ rule_descriptor=> adjective([biodegradable|X]-X,biodegradable) ],[]],
	[id => adj25, [ rule_descriptor=> adjective([darkest|X]-X,darkest) ],[]],
	[id => adj26, [ rule_descriptor=> adjective([brightest|X]-X,brightest) ],[]],
	[id => adj27, [ rule_descriptor=> adjective([strongest|X]-X,strongest) ],[]],
	[id => adj28, [ rule_descriptor=> adjective([most,delicate|X]-X,most_delicate) ],[]],
	[id => adj29, [ rule_descriptor=> adjective([edible|X]-X,edible) ],[]],
	[id => adj30, [ rule_descriptor=> adjective([kosher|X]-X,kosher) ],[]],
	[id => adj31, [ rule_descriptor=> adjective([tastiest|X]-X,tastiest) ],[]],
	[id => adj32, [ rule_descriptor=> adjective([most,acidic|X]-X,most_acidic) ],[]]

	]),

class(question, grammar, [], [],[

	[id => q1, [ rule_descriptor=> quest1([what|X]-X,_) ],[]],
	[id => q2, [ rule_descriptor=> quest1([which|X]-X,_) ],[]],

	[id => q3, [ rule_descriptor=> quest2([where|X]-X,_) ],[]],

	[id => q4, [ rule_descriptor=> quest3([how|X]-X,_) ],[]],
	[id => q5, [ rule_descriptor=> quest3([how,many|X]-X,_) ],[]],
	[id => q6, [ rule_descriptor=> quest3([how,much|X]-X,_) ],[]],

	[id => q7, [ rule_descriptor=> quest4([when|X]-X,_) ],[]],
	[id => q8, [ rule_descriptor=> quest4([who|X]-X,_) ],[]],
	[id => q9, [ rule_descriptor=> quest4([whose|X]-X,_) ],[]],

	[id => q10,[ rule_descriptor=> (quest_a(X-Y,_):-quest3(X-Y,_)) ],[]],
	[id => q11,[ rule_descriptor=> (quest_a(X-Y,_):-count_4(X-Y,_)) ],[]]

	]),
	
class(subject_objects, grammar, [],[],[

	[id => so1, [ rule_descriptor=> subj_obj([objects|X]-X,_) ],[]],
	[id => so2, [ rule_descriptor=> subj_obj([things|X]-X,_) ],[]]

	]),
	
class(crowd_subjects, grammar, [], [],[

	[id => cs1,  [ rule_descriptor=> crowd_s_1([crowd|X]-X,crowd) ],[]],
	[id => cs2,  [ rule_descriptor=> crowd_s_2([children|X]-X,children) ],[]],
	[id => cs2a, [ rule_descriptor=> crowd_s_2([young|X]-X,young) ],[]],
	[id => cs2b, [ rule_descriptor=> crowd_s_2([adults|X]-X,adults) ],[]],
	[id => cs3,  [ rule_descriptor=> crowd_s_3([male|X]-X,men) ],[]],
	[id => cs3a, [ rule_descriptor=> crowd_s_3([men|X]-X,men) ],[]],
	[id => cs4,  [ rule_descriptor=> crowd_s_4([female|X]-X,women) ],[]],
	[id => cs4a, [ rule_descriptor=> crowd_s_4([women|X]-X,women) ],[]],
	[id => cs5,  [ rule_descriptor=> crowd_s_5([people|X]-X,persons) ],[]],
	[id => cs5c,  [ rule_descriptor=> crowd_s_5([persons|X]-X,persons) ],[]],
	
	[id => cs6,  [ rule_descriptor=> crowd_s_6([man|X]-X,man) ],[]],
	[id => cs7,  [ rule_descriptor=> crowd_s_7([woman|X]-X,woman) ],[]],
	[id => cs8,  [ rule_descriptor=> crowd_s_8([child|X]-X,child) ],[]],
	[id => cs9,  [ rule_descriptor=> crowd_s_9([person|X]-X,person) ],[]],


	[id => cs10, [ rule_descriptor=> (crowd_s_a(X-Y,[Subject]):-crowd_s_2(X-Y,Subject)) ],[]],
	[id => cs11, [ rule_descriptor=> (crowd_s_a(X-Y,[Subject]):-crowd_s_5(X-Y,Subject)) ],[]],

	[id => cs12, [ rule_descriptor=> (crowd_s_b(X-Y,[Subject]):-crowd_s_3(X-Y,Subject)) ],[]],
	[id => cs13, [ rule_descriptor=> (crowd_s_b(X-Y,[Subject]):-crowd_s_4(X-Y,Subject)) ],[]],

	[id => cs14, [ rule_descriptor=> (crowd_s_c(X-Y,[Subject]):-crowd_s_6(X-Y,Subject)) ],[]],
	[id => cs15, [ rule_descriptor=> (crowd_s_c(X-Y,[Subject]):-crowd_s_7(X-Y,Subject)) ],[]],
	
	[id => cs16, [ rule_descriptor=> (crowd_s_d(X-Y,[Sub1, Sub2]):-crowd_s_b(X-N1,[Sub1]), connectors_c(N1-N2,_),crowd_s_b(N2-N3,[Sub2]), crowd_s_5(N3-Y,People)) ],[]],	
	[id => cs17, [ rule_descriptor=> (crowd_s_d(X-Y,[Sub1, Sub2]):-crowd_s_b(X-N1,[Sub1]), connectors_c(N1-N2,_),crowd_s_b(N2-Y,[Sub2])) ],[]],

	[id => cs18,[ rule_descriptor=> (crowd_s_e(X-Y,[Sub1, Sub2]):-crowd_s_c(X-N1,[Sub1]), connectors_c(N1-N2,_),crowd_s_c(N2-Y,[Sub2])) ],[]],
	[id => cs18,[ rule_descriptor=> (crowd_s_e(X-Y,[Sub1, Sub2]):-crowd_s_b(X-N1,[Sub1]), connectors_c(N1-N2,_),crowd_s_b(N2-Y,[Sub2])) ],[]]
        
	]),
	
class(crowd_actions, grammar, [], [],[

	[id => ca1, [ rule_descriptor=> crowd_a_1([waiving|X]-X,waiving) ],[]],
	[id => ca2, [ rule_descriptor=> crowd_a_2([raising,arms|X]-X,raising_arms) ],[]],
	[id => ca3, [ rule_descriptor=> crowd_a_3([standing|X]-X,standing) ],[]],
	[id => ca4, [ rule_descriptor=> crowd_a_4([sitting|X]-X,sitting) ],[]],
	[id => ca5, [ rule_descriptor=> crowd_a_5([laying|X]-X,laying) ],[]],
	
	[id => ca6, [ rule_descriptor=> (crowd_a_a(X-Y,[Action]):-crowd_a_1(X-Y,Action)) ],[]],
	[id => ca7, [ rule_descriptor=> (crowd_a_a(X-Y,[Action]):-crowd_a_2(X-Y,Action)) ],[]],
	[id => ca8, [ rule_descriptor=> (crowd_a_a(X-Y,[Action]):-crowd_a_3(X-Y,Action)) ],[]],
	[id => ca9, [ rule_descriptor=> (crowd_a_a(X-Y,[Action]):-crowd_a_4(X-Y,Action)) ],[]],
	[id => ca10,[ rule_descriptor=> (crowd_a_a(X-Y,[Action]):-crowd_a_5(X-Y,Action)) ],[]],
	
	[id => ca11,[ rule_descriptor=> (crowd_a_b(X-Y,[Act1, Act2]):-crowd_a_a(X-N1,[Act1]), connectors_c(N1-N2,_),crowd_a_a(N2-Y,[Act2])) ],[]],
	
	[id => ca12,[ rule_descriptor=> (crowd_a_b(X-Y,[Act1, Act2, Act3]):-crowd_a_a(X-N1,[Act1]), crowd_a_a(N1-N2,[Act2]), connectors_c(N2-N3,_), crowd_a_a(N3-Y,[Act3])) ],[]],
	
	[id => ca13,[ rule_descriptor=> (crowd_a_b(X-Y,[Act1, Act2, Act3, Act4]):-crowd_a_a(X-N1,[Act1]), crowd_a_a(N1-N2,[Act2]), crowd_a_a(N2-N3,[Act3]), connectors_c(N3-N4,_), crowd_a_a(N4-Y,[Act4]))],[]],
	
	[id => ca14,[ rule_descriptor=> (crowd_a_b(X-Y,[Act1, Act2, Act3, Act4, Act5]):-crowd_a_a(X-N1,[Act1]), crowd_a_a(N1-N2,[Act2]), crowd_a_a(N2-N3,[Act3]), crowd_a_a(N3-N4,[Act4]), connectors_c(N4-N5,_), crowd_a_a(N5-Y,[Act5]))],[]]

	]),
	
class(connector, grammar, [], [], [	
	[id => c1,  [ rule_descriptor=> connectors_1([are,in,the|X]-X,_) ],[]], 
	[id => c2,  [ rule_descriptor=> connectors_2([at,the|X]-X,_) ],[]],
	[id => c3,  [ rule_descriptor=> connectors_3([in,the|X]-X,_) ],[]],
	[id => c4,  [ rule_descriptor=> connectors_4([which,is,in,the|X]-X,_) ],[]],
	[id => c5,  [ rule_descriptor=> connectors_5([the|X]-X,_) ],[]],
	[id => c6,  [ rule_descriptor=> connectors_6([and|X]-X,_) ],[]], 
	[id => c7,  [ rule_descriptor=> connectors_7([from,the|X]-X,_) ],[]],
	[id => c6a, [ rule_descriptor=> connectors_8([or|X]-X,_) ],[]], 
	[id => c6b, [ rule_descriptor=> connectors_8([or,a|X]-X,_) ],[]], 
	[id => c6c, [ rule_descriptor=> connectors_9([is,a|X]-X,_) ],[]], 
	[id => c6d, [ rule_descriptor=> connectors_10([was,a|X]-X,_) ],[]],
	[id => c6e, [ rule_descriptor=> connectors_11([am,i,a|X]-X,_) ],[]],
	[id => c6f, [ rule_descriptor=> connectors_12([is,the|X]-X,_) ],[]], 
	[id => c6g, [ rule_descriptor=> connectors_13([can,i|X]-X,_) ],[]],
	[id => c6h, [ rule_descriptor=> connectors_14([of,the|X]-X,_) ],[]],


	[id => c8,  [ rule_descriptor=> (connectors_a(X-Y,_):-connectors_2(X-Y,_)) ],[]],
	[id => c9,  [ rule_descriptor=> (connectors_a(X-Y,_):-connectors_3(X-Y,_)) ],[]],
	[id => c10, [ rule_descriptor=> (connectors_a(X-Y,_):-connectors_4(X-Y,_)) ],[]],
	[id => c11, [ rule_descriptor=> (connectors_b(X-Y,_):-connectors_2(X-Y,_)) ],[]], 
	[id => c12, [ rule_descriptor=> (connectors_b(X-Y,_):-connectors_7(X-Y,_)) ],[]],
	[id => c12a,[ rule_descriptor=> (connectors_c(X-Y,_):-connectors_6(X-Y,_)) ],[]],
	[id => c12b,[ rule_descriptor=> (connectors_c(X-Y,_):-connectors_8(X-Y,_)) ],[]],
	[id => c12c,[ rule_descriptor=> (connectors_d(X-Y,_):-connectors_9(X-Y,_)) ],[]],
	[id => c12d,[ rule_descriptor=> (connectors_d(X-Y,_):-connectors_10(X-Y,_)) ],[]],


	[id => c13,  [ rule_descriptor=> connectors_it1([it|X]-X,_) ],[]],
	[id => c14,  [ rule_descriptor=> connectors_it2([them|X]-X,_) ],[]], 
	[id => c15,  [ rule_descriptor=> (connectors_it(X-Y,_):-connectors_it1(X-Y,_)) ],[]],
	[id => c16,  [ rule_descriptor=> (connectors_it(X-Y,_):-connectors_it2(X-Y,_)) ],[]]
   	]),
   	
class(data, grammar, [], [], [	
	[id => d1,  [ rule_descriptor=> data([your,name|X]-X,'your name') ],[]], 
	[id => d2,  [ rule_descriptor=> data([the,name,of,your,team|X]-X,'name of your team') ],[]],
	[id => d3,  [ rule_descriptor=> data([the,time|X]-X,'the time') ],[]],
	[id => d4,  [ rule_descriptor=> data([the,date|X]-X,'the date') ],[]],
	[id => d5,  [ rule_descriptor=> data([the,day,of,the,month|X]-X,'day of the month') ],[]],
	[id => d6,  [ rule_descriptor=> data([the,day,of,the,week|X]-X,'day of the week') ],[]],
	[id => d7,   [ rule_descriptor=> complete_question([what,is,your,name|X]-X,'your name') ],[]], 
	[id => d8,   [ rule_descriptor=> complete_question([what,is,the,name,of,your,team|X]-X,'name of your team') ],[]],
	[id => d9,   [ rule_descriptor=> complete_question([what,is,your,team,name|X]-X,'name of your team') ],[]],
	[id => d10,  [ rule_descriptor=> complete_question([what,time,is,it|X]-X,'the time') ],[]],
	[id => d11,  [ rule_descriptor=> complete_question([what,day,is,today|X]-X,'what day is today') ],[]], 
	[id => d12,  [ rule_descriptor=> complete_question([what,day,is,tomorrow|X]-X,'what day is tomorrow') ],[]],
	[id => d13,  [ rule_descriptor=> complete_question([in,which,year,was,robocup,at,home,founded|X]-X,'year robocup founded') ],[]]	

   	]),

class(observation, grammar, [], [], [	
	[id => o1,   [ rule_descriptor=> observation_1([the,gesture,of,that,person|X]-X,person_gesture) ],[]], 
	[id => o2,   [ rule_descriptor=> observation_1([which,gesture,is,performing,that,person|X]-X,person_gesture) ],[]],
	[id => o3,   [ rule_descriptor=> observation_1([what,gesture,is,doing,that,person|X]-X,person_gesture) ],[]],
	[id => o4,   [ rule_descriptor=> observation_1([the,gender,of,that,person|X]-X,person_gender) ],[]],
	[id => o5,   [ rule_descriptor=> observation_1([if,the,person,is,male,or,female|X]-X,person_gender) ],[]],
	[id => o6,   [ rule_descriptor=> observation_1([the,sex,of,that,person|X]-X,person_gender) ],[]], 
	[id => o7,   [ rule_descriptor=> observation_2([how,many,people,are,in,the|X]-X,_) ],[]],
	[id => o8,   [ rule_descriptor=> observation_3([how,many|X]-X,_) ],[]],

	[id => o9,   [ rule_descriptor=> (observation(X-Y,watch(Observation)):-observation_1(X-Y,Observation)) ],[]],
	[id => o10,  [ rule_descriptor=> (observation(X-Y,count(persons,Item)):-observation_2(X-N1,_),item(N1-Y,Item)) ],[]],
	[id => o11,  [ rule_descriptor=> (observation(X-Y,count(Item1,Item2)):-observation_3(X-N1,_),item(N1-N2,Item1),connectors_1(N2-N3,_),item(N3-Y,Item2)) ],[]], 
	
	[id => o14,  [ rule_descriptor=> count_1([count,the|X]-X,_) ],[]],
	[id => o15,  [ rule_descriptor=> count_2([count,the,people,at,the|X]-X,_) ],[]],
	[id => o16,  [ rule_descriptor=> count_3([move,to,the|X]-X,_) ],[]],
	[id => o17,  [ rule_descriptor=> count_4([number,of|X]-X,_) ],[]],
	[id => o18,  [ rule_descriptor=> count_5([size,of,the|X]-X,_) ],[]],
	
	[id => o19,  [ rule_descriptor=> (count(X-Y,count(Item1,Item2)):-count_1(X-N1,_),item(N1-N2,Item1),connectors_2(N2-N3,_),item(N3-Y,Item2)) ],[]],
	[id => o20,  [ rule_descriptor=> (count(X-Y,count(Item2,Item1)):-count_3(X-N1,_),item(N1-N2,Item1),count_1(N2-N3,_),item(N3-Y,Item2)) ],[]], 
	[id => o21,  [ rule_descriptor=> (count(X-Y,count(persons,Item1)):-count_2(X-N1,_),item(N1-Y,Item1)) ],[]]

   	]),

class(crowd_observation_arena, grammar, [], [] ,[
	[id => coa1,  [ rule_descriptor=> (count_coa(X-Y,count([persons],Crowd)):-count_5(X-N1,_),crowd_s_1(N1-Y,Crowd)) ],[]],
	[id => coa2,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_d(N1-N2,Subj1), crowd_a_b(N2-Y,Act1)) ],[]],
	[id => coa3,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_d(N1-N2,Subj1), crowd_a_a(N2-Y,Act1)) ],[]],	
	[id => coa4,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_a(N1-N2,Subj1), crowd_a_b(N2-Y,Act1)) ],[]],
	[id => coa5,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_a(N1-N2,Subj1), crowd_a_a(N2-Y,Act1)) ],[]],
	[id => coa6,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_b(N1-N2,Subj1), crowd_a_b(N2-Y,Act1)) ],[]],
	[id => coa7,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_b(N1-N2,Subj1), crowd_a_a(N2-Y,Act1)) ],[]],
	[id => coa8,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_b(N1-N2,Subj1), crowd_s_5(N2-N3,People),crowd_a_b(N3-Y,Act1)) ],[]],
	[id => coa9,  [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd,Act1)):-quest_a(X-N1,_),crowd_s_b(N1-N2,Subj1), crowd_s_5(N2-N3,People),crowd_a_a(N3-Y,Act1)) ],[]],	
	[id => coa10, [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd)):-quest_a(X-N1,_),crowd_s_d(N1-Y,Subj1)) ],[]],
	[id => coa11, [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd)):-quest_a(X-N1,_),crowd_s_a(N1-Y,Subj1)) ],[]],
	[id => coa12, [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd)):-quest_a(X-N1,_),crowd_s_b(N1-N2,Subj1),crowd_s_5(N2-Y,People)) ],[]],
	[id => coa13, [ rule_descriptor=> (count_coa(X-Y,count(Subj1,crowd)):-quest_a(X-N1,_),crowd_s_b(N1-Y,Subj1)) ],[]],
	[id => coa14, [ rule_descriptor=> (count_coa_1(X-Y,count([persons],Crowd)):-quest3(X-N1,_),crowd_s_5(N1-N2,People),connectors_1(N2-N3,_),crowd_s_1(N3-Y,Crowd)) ],[]],
	[id => coa15, [ rule_descriptor=> (count_coa_1(X-Y,count([persons],Crowd)):-connectors_5(X-N1,_),count_4(N1-N2,_),crowd_s_5(N2-N3,People),connectors_3(N3-N4,_),crowd_s_1(N4-Y,Crowd) ) ],[]],
	[id => coa16, [ rule_descriptor=> (count_coa_1(X-Y,count([persons],Crowd)):-quest1(X-N1,_),connectors_12(N1-N2,_),count_4(N2-N3,_),crowd_s_5(N3-N4,People),connectors_3(N4-N5,_),crowd_s_1(N5-Y,Crowd) ) ],[]],
	[id => coa17, [ rule_descriptor=> (count_coa_2(X-Y,Count):-say(X-N1,_),count_coa_1(N1-Y,Count) ) ],[]],

	[id => coa17a,[ rule_descriptor=> (count_coa_3(X-Y,Count):-count_coa(X-N1,Count),connectors_1(N1-N2,_),crowd_s_1(N2-Y,Crowd) ) ],[]],
	[id => coa17b,[ rule_descriptor=> (count_coa_3(X-Y,Count):-count_coa(X-N1,Count),connectors_3(N1-N2,_),crowd_s_1(N2-Y,Crowd) ) ],[]],
	[id => coa17c,[ rule_descriptor=> (count_coa_3(X-Y,Count):-quest1(X-N1,_),connectors_12(N1-N2,_), count_coa(N2-N3, Count), connectors_3(N3-N4,_),crowd_s_1(N4-Y,Crowd)) ],[]],
	[id => coa17d,[ rule_descriptor=> (count_coa_3(X-Y, CMD):- quest1(X-N1,_),connectors_12(N1-N2,_), count_coa(N2-Y, CMD)) ],[]],

	[id => coa18, [ rule_descriptor=> (gender_coa(X-Y,person_gender(Action, Subj2)):-connectors_5(X-N1,_),crowd_a_a(N1-N2,Action), crowd_s_9(N2-N3,Subj1), connectors_d(N3-N4,_), crowd_s_e(N4-Y,Subj2)) ],[]], 
	[id => coa19, [ rule_descriptor=> (gender_coa(X-Y,person_gender(Action, Subj2)):-connectors_d(X-N1,_), crowd_s_e(N1-N2,Subj2), connectors_5(N2-N3,_),crowd_a_a(N3-N4,Action), crowd_s_9(N4-Y,Subj1)) ],[]], 
	[id => coa20, [ rule_descriptor=> (gender_coa(X-Y,person_gender(person, Subj2)):-connectors_11(X-N1,_),crowd_s_e(N1-Y,Subj2)) ],[]], 

	[id => coa21, [ rule_descriptor=> (question_coa_1(X-Y,answer(Item,Adj,1)):- quest1(X-N1,_),connectors_12(N1-N2,_), adjective(N2-N3,Adj), item(N3-Y, Item)) ],[]],
	[id => coa22, [ rule_descriptor=> (question_coa_1(X-Y,answer(Item,Adj,Number)):-quest1(X-N1,_),connectors_12(N1-N2,_), number(N2-N3, Number), adjective(N3-N4,Adj), item(N4-Y, Item)) ],[]],
	[id => coa23, [ rule_descriptor=> (question_coa_1(X-Y,location(Item)):- quest2(X-N1,_),connectors_13(N1-N2,_), find(N2-N3,_), connectors_5(N3-N4,_), item(N4-Y, Item)) ],[]],
	[id => coa24, [ rule_descriptor=> (question_coa_1(X-Y,answer(Item,color)):-quest1(X-N1,_),connectors_12(N1-N2,_), color_1(N2-N3,_), connectors_14(N3-N4,_), item(N4-Y, Item)) ],[]],
	[id => coa25, [ rule_descriptor=> (question_coa_1(X-Y,answer(Item,color)):-say(X-N1,_),connectors_5(N1-N2,_), color_1(N2-N3,_), connectors_14(N3-N4,_), item(N4-Y, Item)) ],[]],
	[id => coa26, [ rule_descriptor=> (question_coa_1(X-Y,answer(Item,color,Color)):-color(X-N1,Color),connectors_12(N1-N2,_), color_1(N2-N3,_), connectors_14(N3-N4,_), item(N4-Y, Item)) ],[]],
	[id => coa27, [ rule_descriptor=> (question_coa_1(X-Y,answer(objects,Item)):-quest1(X-N1,_), subj_obj(N1-N2,_), connectors_1(N2-N3,_), item(N3-Y, Item)) ],[]],
	[id => coa28, [ rule_descriptor=> (question_coa_1(X-Y,answer(objects,Item)):-say(X-N1,_),connectors_5(N1-N2,_),subj_obj(N2-N3,_), connectors_14(N3-N4,_), item(N4-Y, Item)) ],[]],
	[id => coa29, [ rule_descriptor=> (question_coa_1(X-Y,location(Item)):- quest2(X-N1,_),connectors_12(N1-N2,_), item(N2-Y, Item)) ],[]],
	[id => coa30, [ rule_descriptor=> (question_coa_1(X-Y,amount(Item, Location)):- quest3(X-N1,_),item(N1-N2, Item),connectors_1(N2-N3,_), item(N3-Y, Location)) ],[]],

	[id => coa31, [ rule_descriptor=> (question_coa(X-Y, CMD):- question_coa_1(X-Y,CMD)) ],[]],
	[id => coa32, [ rule_descriptor=> (question_coa(X-Y, CMD):- say(X-N1,_),connectors_5(N1-N2,_), count_coa(N2-Y, CMD)) ],[]],
	[id => coa33, [ rule_descriptor=> (question_coa(X-Y, CMD):- say(X-N1,_),count_coa(N1-Y, CMD)) ],[]],
	[id => coa35, [ rule_descriptor=> (question_coa(X-Y, CMD):- count_coa(X-Y, CMD)) ],[]],
	[id => coa36, [ rule_descriptor=> (question_coa(X-Y, CMD):- gender_coa(X-Y, CMD)) ],[]],
	[id => coa37, [ rule_descriptor=> (question_coa(X-Y, CMD):- count_coa_1(X-Y, CMD)) ],[]],
	[id => coa38, [ rule_descriptor=> (question_coa(X-Y, CMD):- count_coa_2(X-Y, CMD)) ],[]],
	[id => coa39, [ rule_descriptor=> (question_coa(X-Y, CMD):- count_coa_3(X-Y, CMD)) ],[]],
	[id => coa40, [ rule_descriptor=> (question_coa(X-Y, CMD):- say(X-N1,_),count_coa_3(N1-Y, CMD)) ],[]],
	[id => coa41, [ rule_descriptor=> (question_coa(X-Y, CMD):- say(X-N1,_),connectors_5(N1-N2,_),count_coa_3(N2-Y, CMD)) ],[]]

	]),
   	
class(destiny, grammar, [], [], [	
	[id => dty1, [ rule_descriptor=> person_destiny_1([me|X]-X,_) ],[]], 
	[id => dty2, [ rule_descriptor=> (person_destiny(X-Y,destiny(me)):-person_destiny_1(X-Y,_)) ],[]],
	[id => dty3, [ rule_descriptor=> (person_destiny(X-Y,destiny(Item1,Item2)):-item(X-N1,Item1),connectors_a(N1-N2,_),item(N2-Y,Item2)) ],[]],
	[id => dty4, [ rule_descriptor=> (destiny(X-Y,Destiny):-person_destiny(X-Y,Destiny)) ],[]],
	[id => dty5, [ rule_descriptor=> (destiny(X-Y,destiny(Item1)):-connectors_5(X-N1,_),item(N1-Y,Item1)) ],[]]
   	]),

class(command, grammar, [], [], [	
	[id => command1,  [ rule_descriptor=> (command(X-Y,[CMD1,CMD2]):-command_single(X-N1,CMD1),connectors_6(N1-N2,_),command_single(N2-Y,CMD2))],[]],
	[id => command2,  [ rule_descriptor=> (command(X-Y,[CMD1,CMD2,CMD3]):-command_single(X-N1,CMD1),command_single(N1-N2,CMD2),connectors_6(N2-N3,_),command_single(N3-Y,CMD3))],[]],
	[id => command3,  [ rule_descriptor=> (command(X-Y,[CMD1,CMD2]):-command_double(X-N1,CMD1),connectors_6(N1-N2,_),command_single(N2-Y,CMD2))],[]],
	[id => command4,  [ rule_descriptor=> (command(X-Y,[CMD1,CMD2]):-command_single(X-N1,CMD1),connectors_6(N1-N2,_),command_double(N2-Y,CMD2))],[]],
	[id => command5,  [ rule_descriptor=> (command(X-Y,[CMD]):-command_coa(X-Y,CMD))],[]]

   	]),
   	
class(command_single, command, [], [], [	
	[id => command_single1,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_take(X-Y,CMD))],[]],
	[id => command_single2,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_speak(X-Y,CMD))],[]],
	[id => command_single3,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_navigate(X-Y,CMD))],[]],
	[id => command_single4,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_deliver(X-Y,CMD))],[]],
	[id => command_single5,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_find(X-Y,CMD))],[]],
	[id => command_single6,  [ rule_descriptor=> (command_single(X-Y,CMD):-command_single_follow(X-Y,CMD))],[]],
	[id => command_single7,  [ rule_descriptor=> (command_coa(X-Y,CMD):-question_coa(X-Y,CMD))],[]]
   	]),

class(command_single_take, command_single, [], [], [	
	[id => command_single_take1,  [ rule_descriptor=> (command_single_take(X-Y,take(Item1)):-take(X-N1,_),connectors_5(N1-N2,_),item(N2-Y,Item1))],[]],
	[id => command_single_take2,  [ rule_descriptor=> (command_single_take(X-Y,take(Item1,Item2)):-take(X-N1,_),connectors_5(N1-N2,_),item(N2-N3,Item1),connectors_b(N3-N4,_),item(N4-Y,Item2)) ],[]],
	[id => command_single_take3,  [ rule_descriptor=> (command_single_take(X-Y,[]):-take(X-N1,_),connectors_it(N1-Y,_))],[]]
   	]),
   	
class(command_single_speak, command_single, [], [], [	
	[id => command_single_speak1,  [ rule_descriptor=> (command_single_speak(X-Y,say(Item1)):-say(X-N1,_),data(N1-Y,Item1)) ],[]],
	[id => command_single_speak2,  [ rule_descriptor=> (command_single_speak(X-Y,say(Item1)):-say(X-N1,_),complete_question(N1-Y,Item1)) ],[]],
	[id => command_single_speak3,  [ rule_descriptor=> (command_single_speak(X-Y,say(Item1)):-complete_question(X-Y,Item1)) ],[]],
	[id => command_single_speak4,  [ rule_descriptor=> (command_single_speak(X-Y,say(Item1)):-say(X-N1,_),observation(N1-Y,Item1)) ],[]],
	[id => command_single_speak5,  [ rule_descriptor=> (command_single_speak(X-Y,Command):-answer(X-Y,Command)) ],[]]

	]),
	
class(command_single_navigate, command_single, [], [], [	
	[id => command_single_navigate1,  [ rule_descriptor=> (command_single_navigate(X-Y,move(Item1)):-move(X-N1,_),connectors_5(N1-N2,_),item(N2-Y,Item1))],[]]
   	]),

class(command_single_deliver, command_single, [], [], [	
	[id => command_single_deliver1,  [ rule_descriptor=> (command_single_deliver(X-Y,deliver(Destiny)):-deliver(X-N1,_),destiny(N1-Y,Destiny))],[]]
   	]),

class(command_single_find, command_single, [], [], [	
	[id => command_single_find1,  [ rule_descriptor=> (command_single_find(X-Y,find(person,_)):-find_person(X-Y,_)) ],[]],
	[id => command_single_find2,  [ rule_descriptor=> (command_single_find(X-Y,find(person,Item1)):-find_person(X-N1,_),connectors_3(N1-N2,_),item(N2-Y,Item1)) ],[]],
	[id => command_single_find3,  [ rule_descriptor=> (command_single_find(X-Y,find(Item1)):-find(X-N1,_),connectors_5(N1-N2,_),item(N2-Y,Item1)) ],[]],
	[id => command_single_find4,  [ rule_descriptor=> (command_single_find(X-Y,find(Item1,Item2)):-find(X-N1,_),connectors_5(N1-N2,_),item(N2-N3,Item1),connectors_a(N3-N4,_),item(N4-Y,Item2)) ],[]]
   	]),

class(command_single_follow, command_single, [], [], [	
	[id => command_single_follow1,  [ rule_descriptor=> (command_single_follow(X-Y,Command):-follow(X-Y,Command)) ],[]]
   	]),

class(command_double, command, [], [], [	
	[id => command_double1,  [ rule_descriptor=> (command_double(X-Y,take(Item1,Item2)):-take(X-N1,_),connectors_5(N1-N2,_),item(N2-N3,Item1),connectors_b(N3-N4,_),item(N4-Y,Item2))],[]],
	[id => command_double2,  [ rule_descriptor=> (command_double(X-Y,take(Item1,Item2)):-take(X-N1,_),connectors_b(N1-N2,_),item(N2-N3,Item2),connectors_5(N3-N4,_),item(N5-Y,Item1))],[]]
   	])

]
